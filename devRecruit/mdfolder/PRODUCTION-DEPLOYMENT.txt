DEVRECRUIT PRODUCTION DEPLOYMENT GUIDE
======================================

HOW ENVIRONMENT VARIABLES WORK IN PRODUCTION
============================================

IMPORTANT: Your users DON'T need environment variables!
Environment variables are only needed by developers and the deployment platform.

THE PRODUCTION PROCESS:
======================

1. DEVELOPMENT PHASE (What you're doing now)
   - Developers use .env.local files locally
   - These files are NOT committed to git
   - Only template files (.env.local.example) are committed

2. BUILD PHASE (When deploying)
   - Deployment platform (Vercel, Netlify, etc.) injects environment variables
   - Next.js builds the application with these variables "baked in"
   - The built application contains the processed environment variables

3. USER PHASE (What users see)
   - Users receive the built application
   - Environment variables are already processed into the code
   - Users don't need to set up anything

DEPLOYMENT PLATFORMS & HOW THEY HANDLE ENVIRONMENT VARIABLES:
============================================================

OPTION 1: VERCEL (Recommended for Next.js)
------------------------------------------
1. Connect your GitHub repo to Vercel
2. In Vercel dashboard, go to Project Settings > Environment Variables
3. Add your environment variables:
   NEXT_PUBLIC_SUPABASE_URL = https://bshhrtukpprqetgfpwsb.supabase.co
   NEXT_PUBLIC_SUPABASE_ANON_KEY = your-key-here
4. Deploy - Vercel automatically injects these during build

OPTION 2: NETLIFY
-----------------
1. Connect your GitHub repo to Netlify
2. Go to Site Settings > Environment Variables
3. Add the same environment variables as above
4. Deploy - Netlify handles the rest

OPTION 3: TRADITIONAL HOSTING (VPS, AWS, etc.)
----------------------------------------------
1. Set environment variables on the server:
   export NEXT_PUBLIC_SUPABASE_URL="https://bshhrtukpprqetgfpwsb.supabase.co"
   export NEXT_PUBLIC_SUPABASE_ANON_KEY="your-key-here"
2. Build the application: yarn build
3. Start the production server: yarn start

OPTION 4: DOCKER DEPLOYMENT
---------------------------
Create a Dockerfile with environment variable injection:

FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN yarn install
COPY . .
ARG NEXT_PUBLIC_SUPABASE_URL
ARG NEXT_PUBLIC_SUPABASE_ANON_KEY
ENV NEXT_PUBLIC_SUPABASE_URL=$NEXT_PUBLIC_SUPABASE_URL
ENV NEXT_PUBLIC_SUPABASE_ANON_KEY=$NEXT_PUBLIC_SUPABASE_ANON_KEY
RUN yarn build
EXPOSE 3000
CMD ["yarn", "start"]

Then deploy with:
docker build --build-arg NEXT_PUBLIC_SUPABASE_URL="your-url" \
             --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="your-key" \
             -t devrecruit .

PRODUCTION VS DEVELOPMENT CREDENTIALS:
=====================================

DEVELOPMENT (Current setup):
- URL: https://bshhrtukpprqetgfpwsb.supabase.co
- Key: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
- Used by: Developers on their local machines

PRODUCTION (When you deploy):
- URL: Same or different Supabase project
- Key: Same or different (preferably different for security)
- Used by: Deployment platform during build process

SECURITY BEST PRACTICES FOR PRODUCTION:
======================================

1. USE DIFFERENT CREDENTIALS FOR PRODUCTION
   - Create a separate Supabase project for production
   - Use different API keys for dev vs prod
   - This prevents dev mistakes from affecting live users

2. ENVIRONMENT SEPARATION
   Development: dev-project.supabase.co
   Staging: staging-project.supabase.co  
   Production: prod-project.supabase.co

3. ACCESS CONTROL
   - Only senior developers have production credentials
   - Use deployment platform's environment variable management
   - Never put production credentials in code or documentation

STEP-BY-STEP PRODUCTION DEPLOYMENT:
==================================

STEP 1: PREPARE FOR PRODUCTION
- Ensure your code works locally with current environment variables
- Test all features thoroughly
- Remove any debug logging (console.log statements)

STEP 2: CHOOSE DEPLOYMENT PLATFORM
- Vercel (easiest for Next.js)
- Netlify (good alternative)
- AWS/Google Cloud (more complex but scalable)

STEP 3: SET UP ENVIRONMENT VARIABLES ON PLATFORM
- Log into your deployment platform
- Navigate to environment variable settings
- Add your Supabase credentials
- Save the configuration

STEP 4: DEPLOY
- Connect your GitHub repo to the platform
- Platform automatically builds and deploys
- Environment variables are injected during build
- Your app is live!

STEP 5: VERIFY DEPLOYMENT
- Visit your live URL
- Test login/signup functionality
- Verify database connections work
- Check that all features function correctly

WHAT HAPPENS DURING DEPLOYMENT:
==============================

1. Platform pulls your code from GitHub
2. Platform sets environment variables
3. Platform runs: yarn install
4. Platform runs: yarn build (environment variables get "baked in")
5. Platform serves the built application
6. Users access the live site with processed environment variables

WHY USERS DON'T NEED ENVIRONMENT VARIABLES:
==========================================

- Environment variables are processed during BUILD TIME
- The final application sent to users has these values already included
- Users just visit your website URL and everything works
- No setup required on user's end

EXAMPLE DEPLOYMENT WORKFLOW:
===========================

1. Developer commits code (without .env.local files)
2. GitHub receives the code
3. Vercel detects the commit
4. Vercel pulls the code
5. Vercel injects environment variables
6. Vercel builds the application
7. Vercel deploys the built application
8. Users can access the live site

TROUBLESHOOTING PRODUCTION ISSUES:
=================================

ISSUE: "Missing Supabase URL" error in production
SOLUTION: Check environment variables are set correctly on deployment platform

ISSUE: App works locally but not in production
SOLUTION: Verify production environment variables match local ones

ISSUE: Database connection fails in production
SOLUTION: Check Supabase project settings and API key permissions

SUMMARY:
========
- Developers need environment variables for local development
- Deployment platforms inject environment variables during build
- Users receive a built application with variables already processed
- No environment setup required for end users
- Environment variables never get committed to git (security)

Your users will simply visit your website URL and everything will work!
The environment variable setup is only for developers and the deployment process. 